import base64
import json
import math
import random
import time

import numpy as np


class yidun_encrypt:

    def Q(self, n):
        def l(n):
            return n if -128 <= n <= 127 else l(256 + n) if n < -128 else l(n - 256)

        def u(n, e):
            return l(n + e)

        def o(n):
            return [l(int(n[i:i + 2], 16)) for i in range(0, len(n), 2)]

        def e(n):
            n = str(n)
            e = []
            r = 0
            t = len(n)
            while r < t:
                if n[r] == '%':
                    if r + 2 < t:
                        e.append(o(n[r + 1:r + 3])[0])
                        r += 2
                else:
                    e.append(l(ord(n[r])))
                r += 1
            return e

        def r(n):
            return n[:64] if len(n) >= 64 else n * (64 // len(n)) + n[:64 % len(n)]

        def c(n, e):
            return l(l(n) ^ l(e))

        def t(n, e):
            return [c(n[i], e[i % len(e)]) for i in range(len(n))]

        def i(n):
            return [l((n >> (24 - 8 * i)) & 255) for i in range(4)]

        def h(n):
            n = str(n)

            return l((int(n[0], 16) << 4) + int(n[1], 16))

        def f(n, e, r, t, a):
            r[t:t + a] = n[e:e + a]
            return r

        def s(n, e):
            return [c(n[i], l(e)) for i in range(len(n))]

        def g(n, e):
            return [c(n[i], l(e + i)) for i in range(len(n))]

        def d(n, e):
            return [c(n[i], l(e - i)) for i in range(len(n))]

        def p(n, e):
            return [u(n[i], l(e)) for i in range(len(n))]

        def v(n, e):
            return [u(n[i], l(e + i)) for i in range(len(n))]

        def m(n, e):
            return [u(n[i], l(e - i)) for i in range(len(n))]

        def y(n):
            return n if 0 <= n + 256 else []

        def a(n):
            return list(n)

        def b(n, e, r):
            i = []
            if len(n) == 1:
                t = n[0]
                a = o = 0
                i.append(e[(t >> 2) & 63])
                i.append(e[((t << 4) & 48) + ((a >> 4) & 15)])
                i.append(r)
                i.append(r)
            elif len(n) == 2:
                t = n[0]
                a = n[1]
                o = 0
                i.append(e[(t >> 2) & 63])
                i.append(e[((t << 4) & 48) + ((a >> 4) & 15)])
                i.append(e[((a << 2) & 60) + ((o >> 6) & 3)])
                i.append(r)
            elif len(n) == 3:
                t = n[0]
                a = n[1]
                o = n[2]
                i.append(e[(t >> 2) & 63])
                i.append(e[((t << 4) & 48) + ((a >> 4) & 15)])
                i.append(e[((a << 2) & 60) + ((o >> 6) & 3)])
                i.append(e[o & 63])
            else:
                return ""
            return "".join(i)

        def w(n):
            o_result = [
                -89,
                -66,
                63,
                57,
                51,
                -6,
                -116,
                95,
                -49,
                -122,
                -60,
                -74,
                -112,
                -117,
                86,
                -101,
                -95,
                -30,
                108,
                26,
                109,
                124,
                -5,
                -10,
                10,
                -28,
                -80,
                14,
                7,
                74,
                25,
                77,
                -84,
                75,
                115,
                -25,
                -8,
                -104,
                84,
                17,
                89,
                -93,
                -99,
                8,
                24,
                59,
                118,
                -18,
                -34,
                -29,
                -19,
                52,
                30,
                102,
                -123,
                -46,
                53,
                116,
                64,
                21,
                -125,
                -108,
                -79,
                -1,
                3,
                -87,
                0,
                76,
                -69,
                -75,
                -54,
                125,
                -53,
                127,
                65,
                72,
                -102,
                22,
                -32,
                61,
                -52,
                -100,
                113,
                -21,
                60,
                -105,
                -106,
                104,
                91,
                29,
                1,
                -76,
                -43,
                97,
                -109,
                -90,
                -31,
                -15,
                -94,
                71,
                4,
                69,
                -63,
                -111,
                -82,
                73,
                -59,
                -40,
                39,
                101,
                -36,
                -126,
                -61,
                80,
                -14,
                99,
                56,
                122,
                36,
                -91,
                2,
                -4,
                -65,
                68,
                46,
                45,
                -35,
                -86,
                -48,
                -23,
                54,
                -39,
                -22,
                34,
                -72,
                -110,
                117,
                48,
                123,
                66,
                81,
                -113,
                -68,
                58,
                98,
                107,
                -88,
                6,
                -44,
                -20,
                -42,
                -41,
                37,
                -11,
                12,
                -56,
                -57,
                47,
                -17,
                -92,
                85,
                28,
                -51,
                111,
                -55,
                -78,
                -73,
                -85,
                -107,
                79,
                -127,
                92,
                114,
                100,
                -58,
                -27,
                31,
                78,
                -81,
                -103,
                -120,
                90,
                121,
                -119,
                43,
                27,
                96,
                -96,
                -77,
                82,
                110,
                87,
                -70,
                93,
                23,
                -115,
                55,
                9,
                88,
                -124,
                126,
                -71,
                -3,
                40,
                -7,
                -50,
                11,
                -64,
                35,
                -12,
                20,
                -118,
                42,
                -33,
                -26,
                50,
                18,
                103,
                105,
                5,
                112,
                67,
                -45,
                -67,
                -114,
                -38,
                13,
                -9,
                -121,
                38,
                41,
                -13,
                -128,
                -98,
                -16,
                83,
                16,
                -24,
                49,
                19,
                33,
                106,
                -2,
                32,
                44,
                70,
                15,
                -62,
                62,
                120,
                -97,
                119,
                -47,
                -83,
                -37,
                94
            ]
            if not n:
                return []
            r = []
            for t in range(len(n)):
                e = n[t]
                r.append(
                    o_result[
                        16 * ((e >> 4) & 15) + (15 & e)]
                )

            return r

        def crc32(n):
            e = [
                0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615,
                3915621685, 2657392035, 249268274, 2044508324, 3772115230,
                2547177864, 162941995, 2125561021, 3887607047, 2428444049,
                498536548, 1789927666, 4089016648, 2227061214, 450548861,
                1843258603, 4107580753, 2211677639, 325883990, 1684777152,
                4251122042, 2321926636, 335633487, 1661365465, 4195302755,
                2366115317, 997073096, 1281953886, 3579855332, 2724688242,
                1006888145, 1258607687, 3524101629, 2768942443, 901097722,
                1119000684, 3686517206, 2898065728, 853044451, 1172266101,
                3705015759, 2882616665, 651767980, 1373503546, 3369554304,
                3218104598, 565507253, 1454621731, 3485111705, 3099436303,
                671266974, 1594198024, 3322730930, 2970347812, 795835527,
                1483230225, 3244367275, 3060149565, 1994146192, 31158534,
                2563907772, 4023717930, 1907459465, 112637215, 2680153253,
                3904427059, 2013776290, 251722036, 2517215374, 3775830040,
                2137656763, 141376813, 2439277719, 3865271297, 1802195444,
                476864866, 2238001368, 4066508878, 1812370925, 453092731,
                2181625025, 4111451223, 1706088902, 314042704, 2344532202,
                4240017532, 1658658271, 366619977, 2362670323, 4224994405,
                1303535960, 984961486, 2747007092, 3569037538, 1256170817,
                1037604311, 2765210733, 3554079995, 1131014506, 879679996,
                2909243462, 3663771856, 1141124467, 855842277, 2852801631,
                3708648649, 1342533948, 654459306, 3188396048, 3373015174,
                1466479909, 544179635, 3110523913, 3462522015, 1591671054,
                702138776, 2966460450, 3352799412, 1504918807, 783551873,
                3082640443, 3233442989, 3988292384, 2596254646, 62317068,
                1957810842, 3939845945, 2647816111, 81470997, 1943803523,
                3814918930, 2489596804, 225274430, 2053790376, 3826175755,
                2466906013, 167816743, 2097651377, 4027552580, 2265490386,
                503444072, 1762050814, 4150417245, 2154129355, 426522225,
                1852507879, 4275313526, 2312317920, 282753626, 1742555852,
                4189708143, 2394877945, 397917763, 1622183637, 3604390888,
                2714866558, 953729732, 1340076626, 3518719985, 2797360999,
                1068828381, 1219638859, 3624741850, 2936675148, 906185462,
                1090812512, 3747672003, 2825379669, 829329135, 1181335161,
                3412177804, 3160834842, 628085408, 1382605366, 3423369109,
                3138078467, 570562233, 1426400815, 3317316542, 2998733608,
                733239954, 1555261956, 3268935591, 3050360625, 752459403,
                1541320221, 2607071920, 3965973030, 1969922972, 40735498,
                2617837225, 3943577151, 1913087877, 83908371, 2512341634,
                3803740692, 2075208622, 213261112, 2463272603, 3855990285,
                2094854071, 198958881, 2262029012, 4057260610, 1759359992,
                534414190, 2176718541, 4139329115, 1873836001, 414664567,
                2282248934, 4279200368, 1711684554, 285281116, 2405801727,
                4167216745, 1634467795, 376229701, 2685067896, 3608007406,
                1308918612, 956543938, 2808555105, 3495958263, 1231636301,
                1047427035, 2932959818, 3654703836, 1088359270, 936918e3,
                2847714899, 3736837829, 1202900863, 817233897, 3183342108,
                3401237130, 1404277552, 615818150, 3134207493, 3453421203,
                1423857449, 601450431, 3009837614, 3294710456, 1567103746,
                711928724, 3020668471, 3272380065, 1510334235, 755167117,
            ]
            r = 4294967295

            for t in range(len(n)):
                r_1 = (r >> 8)
                r_2 = int(e[255 & (r ^ n[t])])
                r = r_1 ^ r_2

            HEX_CHARS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];

            def convert_to_hex_string(numbers):
                HEX_CHARS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]
                return ''.join([HEX_CHARS[(num >> 4) & 15] + HEX_CHARS[num & 15] for num in numbers])

            return convert_to_hex_string(i(4294967295 ^ r))

        def x_en(C, n):
            def a(n):
                return list(n)

            n = a(C) + a(n)

            def inner(n):

                e = []
                r = len(n)
                if r % 64 <= 60:
                    t = 64 - r % 64 - 4
                else:
                    t = 128 - r % 64 - 4

                # f(n, 0, e, 0, r)
                e = n
                for a in range(t):
                    e.append(0)
                return f(i(r), 0, e, r + t, 4)

            n = inner(n)

            if (len(n) % 64 != 0):
                e = []
            else:
                e = []
                r = len(n) / 64
                t = 0
                a = 0
                while t < r:
                    e.append([])
                    for o in range(64):
                        e[t].append(n[a])
                        a = a + 1
                    t = t + 1
            return e

            # if (n.length % 64 != 0) return[];
            # for (var e =[], r = n.length / 64, t = 0, a = 0; t < r; t++) {
            #     e[t] =[];
            # for (var o = 0; o < 64; o++) e[t][o] = n[a++];
            # }
            # return e;

        C = e(n)
        P = e("fd6a43ae25f74398b61c03c83be37449")
        # random_ = random.random()
        random_ = 0.023374362215121236
        M = [l(int(256 * random.random())) for _ in range(4)]

        P = t(r(P), r(M))
        T = r(P)
        S = M
        n = e(crc32(C))
        # x = [n[i:i+64] for i in range(0, len(n), 64)]
        x = x_en(C, n)
        I = S.copy()
        D = T.copy()

        for F in range(len(x)):
            nj = "037606da0296055c"
            e = [y, s, p, g, v, d, m]
            r = nj
            n_inner = x[F]
            for t_ran in range(0, len(r), 4):
                inner_h = r[t_ran:t_ran + 4][0:2]
                i = r[t_ran:t_ran + 4]
                # print(i)
                o = h(inner_h)
                i = h(i[2:4])
                n_inner = e[o](n_inner, i)

            k = t(n_inner, T)

            def D_inner(n, e):
                if n is None:
                    r = []
                else:
                    r = n

                if e is None:
                    t = []
                else:
                    t = e

                a = []
                o = len(t)

                for i in range(len(r)):
                    a.append(u(r[i], t[i % o]))

                return a

            D = w(w(t(D_inner(k, D), D)))

            # I = f(D,0, I, F * 64+4, 64)
            # k = t( w(t(a(x[F]), D)), T)
            # D = w(w(t(k, D)))
            I[F * 64 + 4:F * 64 + 68] = D
        A = "7"

        return "".join([b(I[i:i + 3], "MB.CfHUzEeJpsuGkgNwhqiSaI4Fd9L6jYKZAxn1/Vml0c5rbXRP+8tD3QTO2vWyo", A) for i in
                        range(0, len(I), 3)])

    def n2(self):
        def uuid(n, e=0):
            random_1 = random.random()
            random_2 = random.random()

            t = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
                 'K',
                 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e',
                 'f',
                 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
            a = []
            e = 62
            if n:
                for _ in range(n):
                    a.append(t[int(random_1 * e)])
            else:

                a.extend(['-'] * 4)
                a.insert(14, '4')
                for _ in range(36):
                    if not a[_]:
                        r = int(16 * random_2)
                        a[_] = t[19 if _ == 19 else r]
            return ''.join(a)

        nk = {'uuid': uuid}
        return self.Q(nk['uuid'](32))

    def I(self, n, e):
        def h(n):
            if n < -128:
                return h(256 + n)
            elif n > 127:
                return h(n - 256)
            else:
                return n

        def r(n):
            n = str(n)
            e = []
            r = 0
            t = len(n)
            while r < t:
                if n[r] == '%':
                    if r + 2 < t:
                        e.append(h(int(n[r + 1:r + 3], 16)))
                        r += 2
                else:
                    e.append(h(ord(n[r])))
                r += 1
            return e

        def o(n, e, r):
            i = []
            if len(n) == 1:
                t = n[0]
                a = o = 0
                i.append(e[(t >> 2) & 63])
                i.append(e[((t << 4) & 48) + ((a >> 4) & 15)])
                i.append(r)
                i.append(r)
            elif len(n) == 2:
                t = n[0]
                a = n[1]
                o = 0
                i.append(e[(t >> 2) & 63])
                i.append(e[((t << 4) & 48) + ((a >> 4) & 15)])
                i.append(e[((a << 2) & 60) + ((o >> 6) & 3)])
                i.append(r)
            elif len(n) == 3:
                t = n[0]
                a = n[1]
                o = n[2]
                i.append(e[(t >> 2) & 63])
                i.append(e[((t << 4) & 48) + ((a >> 4) & 15)])
                i.append(e[((a << 2) & 60) + ((o >> 6) & 3)])
                i.append(e[o & 63])
            else:
                return ""
            return "".join(i)

        # 获取参数1 （i）:
        n_temp = n
        n = r(e)
        e = r(n_temp)
        i = []
        for t_range in range(len(n)):
            rrr = n[t_range]
            ttt = e[t_range % len(e)]
            i.append(h(h(rrr) ^ h(ttt)))

        n = i
        e = [
            "i",
            "/",
            "x",
            "1",
            "X",
            "g",
            "U",
            "0",
            "z",
            "7",
            "k",
            "8",
            "N",
            "+",
            "l",
            "C",
            "p",
            "O",
            "n",
            "P",
            "r",
            "v",
            "6",
            "\\",
            "q",
            "u",
            "2",
            "G",
            "j",
            "9",
            "H",
            "R",
            "c",
            "w",
            "T",
            "Y",
            "Z",
            "4",
            "b",
            "f",
            "S",
            "J",
            "B",
            "h",
            "a",
            "W",
            "s",
            "t",
            "A",
            "e",
            "o",
            "M",
            "I",
            "E",
            "Q",
            "5",
            "m",
            "D",
            "d",
            "V",
            "F",
            "L",
            "K",
            "y",
        ]

        t = []
        r = 0
        while r < len(n):
            if not r + 3 <= len(n):
                a = n[r:]
                t.append(o(a, e, "3"))
                break
            a = n[r:r + 3]
            t.append(o(a, e, "3"))
            r += 3

        return "".join(t)

    def B(self, i):
        def n(n, e):
            return n

        def u(n, e):
            r = []
            t = []
            for a in range(len(n) - 1):
                r.append(n[a + 1] - n[a])
                t.append(e[a + 1] - e[a])

            o = []
            for i in range(len(t)):
                o.append(t[i] / r[i])

            return o

        def e(n):
            return list(set(n))

        def r(n):
            return round(n, 4)

        def t(n, e):
            n_sorted = sorted(n)
            if e <= 0:
                return n_sorted[0]
            if e >= 100:
                return n_sorted[-1]
            t = int((len(n_sorted) - 1) * (e / 100))
            return n_sorted[t] + (n_sorted[t + 1] - n_sorted[t]) * ((len(n_sorted) - 1) * (e / 100) - t)

        def o(n):
            mean = np.mean(n)
            return np.sqrt(np.mean([(x - mean) ** 2 for x in n]))

        if not isinstance(i, list) or len(i) <= 2:
            return []
        s = []
        g = []
        d = []
        for i_range in i:
            s.append(i_range[0])
            g.append(i_range[1])
            d.append(i_range[2])

        temp_result = (lambda n, e, r: (
            u(r, n),
            u(r, e),
            u(r, [math.sqrt(n[i] ** 2 + e[i] ** 2) for i in range(len(n))])
        ))(s, g, d)

        m = temp_result
        p = m[0]
        v = m[1]

        l = p
        h = v
        f_ = i = m[2]
        d = d[0:-1]
        y = [u(d, l),
             u(d, h),
             u(d, f_)]

        m = y[0]
        n = y[1]
        y = y[2]

        results = [
            len(set(s)),
            len(set(g)),
            r(np.mean(g)),
            r(o(g)),
            len(s),
            r(min(p)),
            r(max(p)),
            r(np.mean(p)),
            r(o(p)),
            len(set(p)),
            r(t(p, 25)),
            r(t(p, 75)),
            r(min(v)),
            r(max(v)),
            r(np.mean(v)),
            r(o(v)),
            len(set(v)),
            r(t(v, 25)),
            r(t(v, 75)),
            r(min(i)),
            r(max(i)),
            r(np.mean(i)),
            r(o(i)),
            len(set(i)),
            r(t(i, 25)),
            r(t(i, 75)),
            r(min(m)),
            r(max(m)),
            r(np.mean(m)),
            r(o(m)),
            len(set(m)),
            r(t(m, 25)),
            r(t(m, 75)),
            r(min(n)),
            r(max(n)),
            r(np.mean(n)),
            r(o(n)),
            len(set(n)),
            r(t(n, 25)),
            r(t(n, 75)),
            r(min(y)),
            r(max(y)),
            r(np.mean(y)),
            r(o(y)),
            len(set(y)),
            r(t(y, 25)),
            r(t(y, 75)),
        ]

        return results

    def get_data(self, n, e):
        r = [
            [4, 0, 162], [6, 0, 170], [8, 0, 179], [10, 0, 188], [14, 0, 196],
            [17, 1, 205], [20, 1, 214], [24, 1, 223], [26, 1, 232], [27, 1, 240],
            [29, 2, 249], [30, 2, 258], [32, 2, 266], [32, 2, 275], [33, 2, 293],
            [34, 2, 294], [35, 2, 302], [36, 2, 310], [37, 2, 319], [39, 2, 328],
            [40, 2, 336], [42, 2, 345], [43, 2, 363], [45, 2, 364], [47, 2, 380],
            [50, 4, 389], [52, 4, 407], [54, 4, 416], [55, 4, 424], [58, 4, 433],
            [59, 4, 441], [60, 4, 450], [63, 4, 459], [65, 4, 468], [66, 4, 476],
            [68, 4, 485], [72, 4, 494], [76, 4, 503], [80, 4, 511], [82, 4, 520],
            [84, 4, 529], [86, 4, 538], [88, 4, 546], [92, 4, 555], [96, 4, 564],
            [102, 4, 573], [107, 4, 582], [112, 4, 590], [118, 4, 599], [123, 4, 608],
            [129, 4, 616], [134, 4, 625], [140, 4, 643], [145, 4, 644], [150, 4, 652],
            [156, 4, 660], [161, 4, 669], [167, 4, 678], [171, 4, 686], [175, 4, 695],
            [179, 4, 713], [183, 4, 714], [186, 4, 722], [189, 4, 730], [193, 4, 739],
            [197, 4, 748], [202, 4, 757], [206, 4, 765], [210, 4, 784], [214, 4, 785],
            [217, 4, 791], [221, 4, 800], [224, 4, 809], [226, 4, 817], [226, 4, 827],
            [228, 4, 835], [228, 4, 853], [230, 4, 854], [231, 4, 861], [232, 4, 879],
            [232, 4, 880], [234, 4, 888], [234, 4, 897], [236, 4, 905], [236, 4, 924],
            [237, 4, 931], [239, 4, 940], [240, 4, 949], [241, 4, 958], [242, 4, 967],
            [244, 4, 975], [246, 4, 984], [246, 4, 993], [247, 4, 1002], [248, 4, 1010],
            [250, 4, 1019], [252, 4, 1028], [252, 4, 1036], [254, 4, 1045], [254, 4, 1063],
            [255, 4, 1071], [256, 4, 1080], [256, 4, 1098], [257, 4, 1106], [258, 4, 1115],
            [258, 4, 1133], [260, 5, 1150], [260, 5, 1159], [261, 5, 1185], [262, 6, 1203],
            [263, 6, 1211], [264, 6, 1220], [264, 6, 1229], [265, 6, 1238], [266, 6, 1256],
            [266, 6, 1264], [267, 6, 1282], [268, 6, 1291], [268, 6, 1299], [269, 6, 1308],
            [270, 6, 1316], [270, 6, 1343], [270, 6, 1360], [271, 6, 1387], [272, 6, 1396],
            [272, 6, 1413], [273, 6, 1414], [274, 6, 1421], [274, 7, 1430], [274, 7, 1439],
            [275, 7, 1457], [276, 7, 1466], [276, 7, 1483], [277, 7, 1484], [278, 7, 1500],
            [278, 7, 1509], [279, 7, 1518], [280, 8, 1526], [280, 8, 1535]
        ]

        t = []
        for a in range(len(r)):
            o = [0, 0, 0]

            o[0] = int((r[a][0] * e) / 100)
            o[1] = r[a][1]
            o[2] = r[a][2]
            t.append(o)

        i = []
        for a in range(50):
            i.append(self.I(n, f"{t[a][0]},{t[a][1]},{t[a][2]}"))

        def join_B(list):
            result = ""
            for i in list:
                if i == 0.0:
                    result += "0,"
                else:
                    result += str(i) + ","
            return result[:-1]

        return {
            "d": self.Q(":".join(i)),
            "m": "",
            "p": self.Q(self.I(n, str(int(1e3 * e) / 1e3))),
            "f": self.Q(self.I(n, join_B(self.B(t)))),
            "ext": self.Q(self.I(n, "1," + str(len(t))))
        }

    def fp(self):
        def r(input_array):
            if input_array is None:
                return None
            output_array = []
            for i in range(len(input_array)):
                val = input_array[i]
                output_array.append(m[16 * (val >> 4 & 15) + (15 & val)])
            return output_array

        def n(input_array):
            if input_array is None or len(input_array) == 0:
                return l(64)
            if len(input_array) >= 64:
                return input_array[:64]
            else:
                output_array = []
                for i in range(64):
                    output_array.append(input_array[i % len(input_array)])
                return output_array

        def e(input_array, index, size):
            t = ["2", "4", "0", "a", "Y", "H", "i", "Q", "x", "L", "\\", "Z", "u", "f", "V", "l", "g", "8", "s", "P",
                 "M", "R", "6", "d", "G", "k", "X", "v", "O", "/", "C", "b", "w", "9", "W", "D", "j", "1", "E", "T",
                 "y",
                 "I", "S", "c", "m", "e", "o", "J", "z", "3", "7", "q", "t", "h", "B", "r", "U", "+", "K", "N", "A",
                 "5",
                 "p", "n"]
            output_array = []
            if size == 1:
                val = input_array[index]
                output_array.append(t[val >> 2 & 63])
                output_array.append(t[(val << 4 & 48) + (0 >> 4 & 15)])
                output_array.append("F")
                output_array.append("F")
            elif size == 2:
                val1 = input_array[index]
                val2 = input_array[index + 1]
                output_array.append(t[val1 >> 2 & 63])
                output_array.append(t[(val1 << 4 & 48) + (val2 >> 4 & 15)])
                output_array.append(t[(val2 << 2 & 60) + (0 >> 6 & 3)])
                output_array.append("F")
            else:
                val1 = input_array[index]
                val2 = input_array[index + 1]
                val3 = input_array[index + 2]
                output_array.append(t[val1 >> 2 & 63])
                output_array.append(t[(val1 << 4 & 48) + (val2 >> 4 & 15)])
                output_array.append(t[(val2 << 2 & 60) + (val3 >> 6 & 3)])
                output_array.append(t[val3 & 63])
            return "".join(output_array)

        def l(size):
            return [0] * size

        def t(src_array, src_index, dest_array, dest_index, length):
            for i in range(length):
                try:
                    dest_array[dest_index + i] = src_array[src_index + i]
                except IndexError:
                    dest_array.append(src_array[src_index + i])
            return dest_array

        def u(val):
            return [(val >> 24 & 255), (val >> 16 & 255), (val >> 8 & 255), (val & 255)]

        def a(s):
            if s is None or s == "":
                return s
            output_array = []
            i = 0
            while i < len(s):
                if s[i] == "%":
                    if i + 2 >= len(s):
                        raise Exception("1009")
                    output_array.extend([int(s[i + 1:i + 3], 16)])
                    i += 3
                else:
                    output_array.append(ord(s[i]))
                    i += 1
            return output_array

        def f(array1, array2):
            if array1 is None or array2 is None or len(array1) != len(array2):
                return array1
            output_array = []
            for i in range(len(array1)):
                output_array.append(h(array1[i], array2[i]))
            return output_array

        def h(val1, val2):
            return i(val1) ^ i(val2)

        def i(val):
            if val < -128:
                return i(128 - (-128 - val))
            elif -128 <= val <= 127:
                return val
            elif val > 127:
                return i(-129 + val - 127)
            else:
                raise Exception("1001")

        g = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274,
             2044508324,
             3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648,
             2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636,
             335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145,
             1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101,
             3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705,
             3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565,
             1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290,
             251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866,
             2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202,
             4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538,
             1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467,
             855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635,
             3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443,
             3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523,
             3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580,
             2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920,
             282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732,
             1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512,
             3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109,
             3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625,
             752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877,
             83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881,
             2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934,
             4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406,
             1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270,
             936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150,
             3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471,
             3272380065, 1510334235, 755167117]
        d = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]
        y = 64
        m = [-9, -84, -50, 59, 115, 102, 57, 125, 94, -15, 15, 2, -72, -98, -79, 38, -56, -49, 76, -26, -117, 60, 90, 9,
             -107, -12, -71, -100, 63, 42, -18, 28, -120, -11, 33, 45, 79, 92, 37, 97, 4, 58, 98, 84, -97, -88, 95,
             -104,
             -13, -89, 78, -90, 119, -66, 13, -5, 29, -116, -4, -81, 27, 40, -59, -43, 85, 48, -74, 109, -64, 26, 67,
             -33,
             -115, 0, -37, -102, 88, -48, 127, -86, 41, 105, -2, 122, -42, 112, -94, 81, -31, -65, -101, -14, 65, 49,
             -67,
             -114, -103, -87, -19, 104, 66, -73, -34, -78, -45, -27, -109, -108, 47, 61, 86, 43, -54, 25, 64, -35, -44,
             53,
             -112, 36, 73, 89, -82, 51, -32, 39, -83, 80, -85, -111, 12, -58, 103, -76, -46, -127, 34, 1, -99, 14, -57,
             110,
             106, 93, -52, 11, 113, 20, -106, 75, 62, -69, -39, -55, -119, 126, 114, 123, 10, 77, -121, -8, 74, 21, -93,
             17,
             -61, -21, -105, -126, 18, 124, -17, 52, -10, -77, -24, -22, 120, -95, -25, 96, -110, 22, -23, 69, -125,
             -128,
             -47, -38, -1, 3, -20, 100, 68, 101, 5, 117, -122, 44, -51, -36, -41, 24, -80, 30, 82, -63, -40, -92, 91,
             -6,
             -53, -124, -62, -28, 111, 19, 50, 108, 70, -68, -29, -75, 99, -91, -60, -70, 71, -118, -3, 83, 87, -7, 32,
             55,
             31, -123, 121, 107, -113, 46, -30, 118, 54, 23, 116, -16, 7, 6, 35, 16, -96, 56, 72, 8]

        I = []
        b = {"v": "v1.1", "h": "app.miit-eidc.org.cn"}

        w = int(time.time() * 1000) + 2533

        b["u"] = 'aaa' + str(w) + 'aaa'
        b["fp"] = ",".join(["38261949755448", "6368000112753"])
        nA = "14731255234d414cF91356d684E4E8F5F56c8f1bc"

        def E(r):
            n = ["v", "fp", "u", "h", "ec", "em", "icp"]
            e = ""
            if r is None:
                return r
            if type(r) != dict:
                return None
            e += "{"
            for l in range(len(n)):
                if n[l] in r:
                    t = "" + str(r[n[l]]) if r[n[l]] is not None else None
                    t = t.replace("'", "'").replace('"', '"')
                    e += "'" + n[l] + "':'" + t + "',"
            if e[-1] == ",":
                e = e[:-1]
            return e + "}"

        E = E(b)

        def j(r):
            t = 4294967295
            if r is not None:
                for l in range(len(r)):
                    # print(g[255 & (t ^ r[l])])
                    t = t >> 8 ^ int(g[255 & (t ^ r[l])])
            if (r := u(4294967295 ^ t)) is None or len(r) < 0:
                r = ""
            else:
                l = []
                for o in range(len(r)):
                    n = r[o]
                    e = []
                    e.append(d[n >> 4 & 15])
                    e.append(d[15 & n])
                    l.append("".join(e))
                r = "".join(l)
            return r

        j = j(a(E))
        A = a(E + j)
        R = a(nA)
        j = []
        for U in range(4):
            C = 256 * random.random()
            # 0.11111
            C = int(C)
            j.append(i(C))

        R = f(n(R), n(j))
        U = R = n(R)
        if A is None or len(A) == 0:
            F = l(y)
        else:
            S = len(A)
            x = y - S % y - 4 if S % y <= 60 else 128 - S % y - 4
            A = t(A, 0, [], 0, S)
            for G in range(x):
                A.append(0)
            A = t(u(S), 0, A, S + x, 4)
            F = A
        S = F
        F = []
        L = 0
        N = len(S) // y
        for k in range(N):
            F.append([])
            for O in range(y):
                F[k].append(S[L])
                L += 1
        L = t(j, 0, [], 0, 4)
        for J in range(len(F)):
            M = F[J]
            P = i(37)
            N = []
            for q in range(len(M)):
                N.append(h(M[q], P))

            B = i(35)
            k = []
            for Q in range(len(N)):
                k.append(h(N[Q], B))
                B -= 1

            z = k
            N = z
            W = i(-44)
            k = []
            for Y in range(len(N)):
                k.append(i(N[Y] + W))
                W += 1

            V = k
            Z = f(V, R)

            k = U
            N = Z

            O = []
            rr = len(k)
            for nr in range(len(N)):
                O.append(i(N[nr] + k[nr % rr]))
            _ = O

            Z = r(f(_, U))
            Z = r(Z)

            L = t(Z, 0, L, J * y + 4, y)
            U = Z

        H = []
        tr = 0
        while tr < len(L):
            if tr + 3 > len(L):
                H.append(e(L, tr, len(L) - tr))
                break
            H.append(e(L, tr, 3))
            tr += 3
        _ = "".join(H)

        return _ + ":" + str(w)

    def login_encrypt(self,n, e, r, t):
        def nS(n):
            e = {"\\": "-", "/": "_", "+": "*"}
            return ''.join([e.get(ch, ch) for ch in n])

        t = "CN31_" + nS(self.Q(r + "::" + t)) + "_v_i_1"
        t = json.dumps({"account": n, "password": e, "validate": t})
        return base64.b64encode(t.encode()).decode()

    def call(self, fun, n=None, e=None, r=None, t=None):
        if fun == "get_data":
            return self.get_data(n, e)
        elif fun == "fp":
            return self.fp()
        elif fun == "n2":
            return self.n2()
        elif fun == "login_encrypt":
            return self.login_encrypt(n, e, r, t)
        else:
            raise Exception("No such function")


if __name__ == "__main__":
    ctx = yidun_encrypt()
    print(ctx.call("fp"))
    print(ctx.call("get_data", "123321456654", 0.11111))
